{"version":3,"file":"bundle.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,gECA3E,IAAMI,EAAa,aACbC,EAAY,YACZC,EAAc,cACdC,EAAY,YACZC,EAAe,eCJrB,SAASC,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAACC,GAAY,OAAAC,WAAWD,EAASF,EAApB,GACpC,CCFA,IAAII,EAAU,EACVC,EAAU,EACVC,EAAgB,GAqBb,SAASC,IACZC,cAAcF,GACdF,EAAU,EACVC,EAAU,CACd,CChBO,IAAMI,EAAkB,SAC3BC,EACAC,GAEAD,EAAYE,UAAY,iFAGQ,oBAA5BD,EAAaE,YACe,gBAA5BF,EAAaE,WACP,cACA,SAAQ,sDAGsB,oBAA5BF,EAAaE,YACe,gBAA5BF,EAAaE,WACP,sBACA,GAAE,6FAI4B,gBAA5BF,EAAaE,WACP,OACA,cAAa,iGAIK,gBAA5BF,EAAaE,WACP,YACA,WAAU,6TAQA,qBAA5BF,EAAaE,WACP,gBACA,SAAQ,gBAGlB,IAAMC,EAAeJ,EAAYK,cAC7B,oBAGEC,EAAaN,EAAYK,cAAc,gBAEb,qBAA5BJ,EAAaE,YDtDd,SAAoBH,GACvBJ,EAAWW,aAAY,WAEH,MADhBZ,IAEID,IACAC,EAAU,GAIdK,EAAYE,WACPR,EAAU,GAAK,IAAM,IACtBA,EACA,KACCC,EAAU,GAAK,IAAM,IACtBA,CACR,GAAG,IACP,CCuCQa,CAAWJ,GAIiB,oBAA5BH,EAAaE,YACe,gBAA5BF,EAAaE,aAEbG,EAAWJ,UAAYD,EAAaQ,KACpCZ,KAGuBG,EAAYK,cACnC,mBAGeK,iBAAiB,SAAS,WACzCC,EAAQvB,GACRwB,EAASC,GACThB,IACAR,EAAM,KAAMyB,MAAK,WACbH,EAAQ3B,GACR4B,EAASC,EACb,GACJ,GACJ,ECtEME,EAAiB,CAAC,SAAU,QAAS,WAAY,UACjDC,EAAsB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAClEC,EAAgB,GAMPC,EAAc,SACvBH,EACAC,EACAC,GAEA,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC9BF,EAAME,GAAK,CACPJ,KAAM,UAAGA,EAAKM,KAAKC,MAAsB,EAAhBD,KAAKE,YAC9BC,MAAO,UAAGR,EAAUK,KAAKC,MAAsB,EAAhBD,KAAKE,aAI5CN,EAAMQ,SAAQ,SAACC,GACXT,EAAMU,KAAKD,EACf,IAEAT,EAAMW,MAAK,WAAM,OAAAP,KAAKE,SAAW,EAAhB,GACrB,EAEaM,EAAc,SAACZ,GAyBxB,OAxBkBA,EACba,KAAI,SAACC,GACF,MAAO,qFAEWA,EAAKP,MAAK,YAAIO,EAAKhB,KAAI,qOAIAgB,EAAKP,MAAK,uHACuCO,EAAKhB,KAAI,iJAE5BgB,EAAKhB,KAAI,qIAEvCgB,EAAKP,MAAK,uHACuCO,EAAKhB,KAAI,+NAQvG,IACCiB,KAAK,GAEd,ECtDWnB,EAAO7B,EAEPiB,EAAwB,CAE/BQ,KAAM,IAENwB,WAAY,GAEZ9B,WAAY,IASHQ,EAAU,SAACuB,GACpBrB,EAAOqB,CACX,EAEaC,EAAe,SAACC,GACzBnC,EAAaE,WAAaiC,CAC9B,EAEaC,EAAU,SAACC,GACpBrC,EAAaQ,KAAO6B,CACxB,EAEa1B,EAAW,SAACC,GAEjB,CAAC5B,EAAWD,EAAYG,EAAWD,EAAaE,GAAcmD,SAC1D1B,KAGAA,IAAS7B,IACTiB,EAAaE,WAAa,0BAC1BqC,KAGA3B,IAAS5B,IACTgB,EAAagC,WAAa,OAC1BhC,EAAaE,WAAa,mBAC1BF,EAAaQ,KAAO,QACpB+B,KAGA3B,IAAS3B,IACTe,EAAagC,WAAa,SAC1BhC,EAAaE,WAAa,mBAC1BF,EAAaQ,KAAO,QACpB+B,KAGA3B,IAAS1B,IACTc,EAAagC,WAAa,OAC1BhC,EAAaE,WAAa,mBAC1BF,EAAaQ,KAAO,QACpB+B,KAGA3B,IAASzB,GACToD,IAGZ,EAEaA,EAAY,WACrB,IAAMC,EAAQC,SAASC,eAAe,OACtC,OAAI9B,IAAS5B,GAAa4B,IAAS3B,GAAe2B,IAAS1B,EDbjC,SAACsD,GAC3B,IAAIG,EAAe,GACnB,OAAQ3C,EAAagC,YACjB,IAAK,OACDhB,EAAMG,OAAS,EACfF,EAAYH,EAAMC,EAAWC,GAC7B2B,EAAe,6IAGbf,EAAYZ,GAAM,sJAGpB,MAEJ,IAAK,SACDA,EAAMG,OAAS,EACfF,EAAYH,EAAMC,EAAWC,GAC7B2B,EAAe,+IAGbf,EAAYZ,GAAM,0JAGpB,MACJ,IAAK,OACDA,EAAMG,OAAS,EACfF,EAAYH,EAAMC,EAAWC,GAC7B2B,EAAe,8IAGbf,EAAYZ,GAAM,sJAM5BwB,EAAMvC,UAAY0C,EAElB,IAAMC,EAAmBH,SAASrC,cAC9B,wBAEJN,EAAgB8C,EAAkB5C,GAEjByC,SAASC,eAAe,kBAEhCjC,iBAAiB,SAAS,WAC/BoC,GACJ,IAEA,IAAMC,EAAYL,SAASM,iBACvB,cAGEF,EAAW,WACb,IAAIG,EAAwB,GACtBC,EAAaR,SAASC,eAAe,SACrCQ,EAAaT,SAASC,eAAe,SACrCS,EAAaV,SAASC,eAAe,SAC3CU,EAAaN,GACbK,EAAWE,OACXF,EAAWG,OAAS,GACpBlE,EAAM,KAAMyB,MAAK,WACbqB,EAAa,oBACbpC,EAAgB8C,EAAkB5C,GAClC,IAAMG,EAAesC,SAASrC,cAC1B,oBAEJgD,EAAaN,GACbA,EAAUtB,SAAQ,SAACM,GACf,GAAIA,aAAgByB,YAAa,CAC7B,IAAM,EAAYzB,EAAK0B,QAAQ1B,KAC/BA,EAAKrB,iBAAiB,SAAS,WAC3BgD,EAAS3B,GACT1C,EAAM,KAAMyB,MAAK,WACbmC,EAAetB,KAAK,GAChBsB,EAAe7B,OAAS,GAAM,IAE1B6B,EAAe,KAAOA,EAAe,IACrCA,EAAe,KAAOA,EAAe,IACrCA,EAAe,KAAOA,EAAe,IACrCA,EAAe,KAAOA,EAAe,IACrCA,EAAe,KAAOA,EAAe,IACrCA,EAAe,MAAQA,EAAe,KACtCA,EAAe,MAAQA,EAAe,KACtCA,EAAe,MAAQA,EAAe,KACtCA,EAAe,MAAQA,EAAe,KAEtCC,EAAWI,OACXjE,EAAM,KAAMyB,MAAK,WACbuB,EAAQjC,EAAaF,WACrBiC,EAAa,eACbpC,EACI8C,EACA5C,EAER,MAEAkD,EAAWG,OACXH,EAAWI,OAAS,GACpBlB,EAAQjC,EAAaF,YAGrB+C,EAAe7B,SAAWH,EAAMG,SAChCe,EAAa,mBACbE,EAAQjC,EAAaF,WACrBH,EACI8C,EACA5C,IAIhB,GACJ,IACmByC,SAASC,eACxB,kBAEOjC,iBAAiB,SAAS,WACjCb,IACAc,EAAQvB,GACRwB,EAASC,GACTxB,EAAM,KAAMyB,MAAK,WACbH,EAAQ3B,GACR4B,EAASC,EACb,GACJ,G,CAER,GACJ,GACJ,EAEM6C,EAAW,SAACC,GACdA,EAAYC,UAAUC,OAAO,aACjC,EAEMR,EAAe,SAACS,GAClBA,EAAarC,SAAQ,SAACM,GAClBA,EAAK6B,UAAUC,OAAO,aAC1B,GACJ,EAEAR,EAAaN,EACjB,CC/HegB,CAAetB,GAGtB5B,IAAS7B,ECjFV,SAAkCyD,GAsBrCA,EAAMvC,UArBc,q2BAuBpB,IAAM8D,EAAUtB,SAASC,eAAe,QAClCsB,EAAYvB,SAASC,eAAe,UACpCuB,EAAUxB,SAASC,eAAe,QAClCwB,EAAWzB,SAASC,eAAe,SACnCyB,EAAgB,CAACJ,EAASC,EAAWC,GAE3CE,EAAc3C,SAAQ,SAACC,GACnBA,EAAGhB,iBAAiB,SAAS,WACzB0D,EAAc3C,SAAQ,SAACC,GACnBA,EAAG2C,gBAAgB,UACvB,IACA3C,EAAG4C,aAAa,UAAW,GAC/B,GACJ,IAEAH,EAASzD,iBAAiB,SAAS,WAC3BsD,EAAQO,aAAa,aACrB5D,EAAQvB,GACRwB,EAASC,GACTxB,EAAM,KAAMyB,MAAK,WACbH,EAAQ1B,GACR2B,EAASC,EACb,KAGAoD,EAAUM,aAAa,aACvB5D,EAAQvB,GACRwB,EAASC,GACTxB,EAAM,KAAMyB,MAAK,WACbH,EAAQzB,GACR0B,EAASC,EACb,KAGAqD,EAAQK,aAAa,aACrB5D,EAAQvB,GACRwB,EAASC,GACTxB,EAAM,KAAMyB,MAAK,WACbH,EAAQxB,GACRyB,EAASC,EACb,IAER,GACJ,CDee2D,CAAyB/B,GAGhC5B,IAASzB,EEzFyB,SAACqD,GAyCvCA,EAAMvC,UAxCa,o7CAyCvB,CFgDeuE,CAA2BhC,QADtC,CAGJ,EAEA7B,EAASC,E","sources":["webpack://card_game/webpack/bootstrap","webpack://card_game/webpack/runtime/define property getters","webpack://card_game/webpack/runtime/hasOwnProperty shorthand","webpack://card_game/./app/routes.ts","webpack://card_game/./app/modules/delay.ts","webpack://card_game/./app/modules/timer.ts","webpack://card_game/./app/components/game-interface-components.ts","webpack://card_game/./app/components/game-page-component.ts","webpack://card_game/./app/app.ts","webpack://card_game/./app/components/first-page-components.ts","webpack://card_game/./app/components/loading-page-components.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const FIRST_PAGE = 'first-page';\nexport const EASY_PAGE = 'easy-page';\nexport const MEDIUM_PAGE = 'medium-page';\nexport const HARD_PAGE = 'hard-page';\nexport const LOADING_PAGE = 'loading-page';\n","export function delay(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","let minutes = 0;\nlet seconds = 0;\nlet interval: any = '';\n\nexport function startTimer(htmlElement: HTMLElement) {\n    interval = setInterval(() => {\n        seconds++;\n        if (seconds === 60) {\n            minutes++;\n            seconds = 0;\n        }\n\n        // Выводим время на страницу\n        htmlElement.innerHTML =\n            (minutes < 10 ? '0' : '') +\n            minutes +\n            '.' +\n            (seconds < 10 ? '0' : '') +\n            seconds;\n    }, 1000);\n}\n\n// Функция для остановки секундомера\nexport function stopTimer() {\n    clearInterval(interval);\n    minutes = 0;\n    seconds = 0;\n}\n","import { goToPage, page, setPage } from '../app';\nimport { delay } from '../modules/delay';\nimport { startTimer, stopTimer } from '../modules/timer';\nimport { FIRST_PAGE, LOADING_PAGE } from '../routes';\n\ninterface userSet {\n    time: string;\n    difficulty: string;\n    gameStatus: string;\n}\n\nexport const renderInterface = (\n    htmlElement: HTMLElement,\n    userSettings: userSet,\n) => {\n    htmlElement.innerHTML = `\n    <div class=\"interface-timer\">00.00</div>\n    <div class=\"result ${\n        userSettings.gameStatus === 'result-congrats' ||\n        userSettings.gameStatus === 'result-dead'\n            ? 'result_open'\n            : 'hidden'\n    }\">\n            <div class=\"result-wrapper ${\n                userSettings.gameStatus === 'result-congrats' ||\n                userSettings.gameStatus === 'result-dead'\n                    ? 'result-wrapper_open'\n                    : ''\n            }\">\n                <div class=\"result-img\">\n                    <img src=\"./img/${\n                        userSettings.gameStatus === 'result-dead'\n                            ? 'dead'\n                            : 'celebration'\n                    }.png\" alt=\"\" />\n                </div>\n                <div class=\"result-title\">Вы ${\n                    userSettings.gameStatus === 'result-dead'\n                        ? 'Проиграли'\n                        : 'Выйграли'\n                }!</div>\n                <div class=\"result-text\">Затраченное время:</div>\n                <div class=\"result-time\">01.20</div>\n                <button id=\"restart-button\" class=\"result-button\">Играть снова</button>\n            </div>\n    </div>\n    <button class=\"control-button\" id=\"control-button\">${\n        userSettings.gameStatus === 'playing-the-game'\n            ? 'Начать заново'\n            : 'Начать'\n    }</div>\n    `;\n    const timerElement = htmlElement.querySelector(\n        '.interface-timer',\n    ) as HTMLElement;\n\n    const resultTime = htmlElement.querySelector('.result-time') as HTMLElement;\n\n    if (userSettings.gameStatus === 'playing-the-game') {\n        startTimer(timerElement);\n    }\n\n    if (\n        userSettings.gameStatus === 'result-congrats' ||\n        userSettings.gameStatus === 'result-dead'\n    ) {\n        resultTime.innerHTML = userSettings.time;\n        stopTimer();\n    }\n\n    const restartBtnInResult = htmlElement.querySelector(\n        '#restart-button',\n    ) as HTMLElement;\n\n    restartBtnInResult.addEventListener('click', () => {\n        setPage(LOADING_PAGE);\n        goToPage(page);\n        stopTimer();\n        delay(1000).then(() => {\n            setPage(FIRST_PAGE);\n            goToPage(page);\n        });\n    });\n};\n","import {\n    goToPage,\n    page,\n    setNewStatus,\n    setPage,\n    setTime,\n    userSettings,\n} from '../app';\nimport { delay } from '../modules/delay';\nimport { stopTimer } from '../modules/timer';\nimport { FIRST_PAGE, LOADING_PAGE } from '../routes';\nimport { renderInterface } from './game-interface-components';\n\nconst suit: string[] = ['hearts', 'clubs', 'diamonds', 'spades'];\nconst cardValue: string[] = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nlet cards: card[] = [];\ninterface card {\n    value: string;\n    suit: string;\n}\n\nexport const randomCards = (\n    suit: string[],\n    cardValue: string[],\n    cards: object[],\n) => {\n    for (let i = 0; i < cards.length; i++) {\n        cards[i] = {\n            suit: `${suit[Math.floor(Math.random() * (3 - 0 + 1))]}`,\n            value: `${cardValue[Math.floor(Math.random() * (8 - 0 + 1))]}`,\n        };\n    }\n\n    cards.forEach((el: object) => {\n        cards.push(el);\n    });\n\n    cards.sort(() => Math.random() - 0.5);\n};\n\nexport const renderCards = (cards: card[]) => {\n    const cardsHTML = cards\n        .map((card) => {\n            return `\n            <div class=\"scene scene--card\">\n            <div data-card=\"${card.value}-${card.suit}\" class=\"card-flip\">\n                <div class=\"card__face card__face--front\">\n                <div class=\"card\">\n                        <div class=\"card-left\">\n                            <div class=\"card-name\">${card.value}</div>\n                            <div class=\"card-suit card-suit_small\"><img width=\"9px\" src=\"./img/suit/${card.suit}.png\" alt=\"\"></div>\n                        </div>\n                        <div class=\"card-suit\"><img width=\"35px\" src=\"./img/suit/${card.suit}.png\" alt=\"\"></div>\n                        <div class=\"card-right\">\n                            <div class=\"card-name\">${card.value}</div>\n                            <div class=\"card-suit card-suit_small\"><img width=\"9px\" src=\"./img/suit/${card.suit}.png\" alt=\"\"></div>\n                        </div>\n                </div>          \n                </div>\n                <div class=\"card__face card__face--back\"></div>\n            </div>\n        </div>\n        `;\n        })\n        .join('');\n    return cardsHTML;\n};\n\nexport const renderGamePage = (appEl: HTMLElement) => {\n    let gamePageHtml = '';\n    switch (userSettings.difficulty) {\n        case 'easy':\n            cards.length = 3;\n            randomCards(suit, cardValue, cards);\n            gamePageHtml = `\n            <div class=\"interface-container\"></div>\n            <div class=\"cards-container cards-container_easy\">\n            ${renderCards(cards)}                     \n            </div>                                                                                           \n            `;\n            break;\n\n        case 'medium':\n            cards.length = 6;\n            randomCards(suit, cardValue, cards);\n            gamePageHtml = `\n            <div class=\"interface-container\"></div>\n            <div class=\"cards-container cards-container_medium\">\n            ${renderCards(cards)}                         \n            </div>                                                                                           \n            `;\n            break;\n        case 'hard':\n            cards.length = 9;\n            randomCards(suit, cardValue, cards);\n            gamePageHtml = `\n            <div class=\"interface-container\"></div>\n            <div class=\"cards-container cards-container_hard\"> \n            ${renderCards(cards)}                     \n            </div>                                                                                           \n            `;\n            break;\n    }\n\n    appEl.innerHTML = gamePageHtml;\n\n    const interfaceElement = document.querySelector(\n        '.interface-container',\n    ) as HTMLElement;\n    renderInterface(interfaceElement, userSettings);\n\n    const startBtn = document.getElementById('control-button') as HTMLElement;\n\n    startBtn.addEventListener('click', () => {\n        playGame();\n    });\n\n    const cardsList = document.querySelectorAll(\n        '.card-flip',\n    ) as NodeListOf<Element>;\n\n    const playGame = () => {\n        let cardForCompare: any[] = [];\n        const deathSound = document.getElementById('death') as HTMLVideoElement;\n        const rightSound = document.getElementById('right') as HTMLVideoElement;\n        const startSound = document.getElementById('start') as HTMLVideoElement;\n        flipAllCards(cardsList);\n        startSound.play();\n        startSound.volume = 0.3;\n        delay(5000).then(() => {\n            setNewStatus('playing-the-game');\n            renderInterface(interfaceElement, userSettings);\n            const timerElement = document.querySelector(\n                '.interface-timer',\n            ) as HTMLElement;\n            flipAllCards(cardsList);\n            cardsList.forEach((card) => {\n                if (card instanceof HTMLElement) {\n                    const cardValue = card.dataset.card;\n                    card.addEventListener('click', () => {\n                        flipCard(card);\n                        delay(1000).then(() => {\n                            cardForCompare.push(cardValue);\n                            if (cardForCompare.length % 2 === 0) {\n                                if (\n                                    cardForCompare[0] !== cardForCompare[1] ||\n                                    cardForCompare[2] !== cardForCompare[3] ||\n                                    cardForCompare[4] !== cardForCompare[5] ||\n                                    cardForCompare[6] !== cardForCompare[7] ||\n                                    cardForCompare[8] !== cardForCompare[9] ||\n                                    cardForCompare[10] !== cardForCompare[11] ||\n                                    cardForCompare[12] !== cardForCompare[13] ||\n                                    cardForCompare[14] !== cardForCompare[15] ||\n                                    cardForCompare[16] !== cardForCompare[17]\n                                ) {\n                                    deathSound.play();\n                                    delay(1000).then(() => {\n                                        setTime(timerElement.innerHTML);\n                                        setNewStatus('result-dead');\n                                        renderInterface(\n                                            interfaceElement,\n                                            userSettings,\n                                        );\n                                    });\n                                } else {\n                                    rightSound.play();\n                                    rightSound.volume = 0.5;\n                                    setTime(timerElement.innerHTML);\n                                }\n\n                                if (cardForCompare.length === cards.length) {\n                                    setNewStatus('result-congrats');\n                                    setTime(timerElement.innerHTML);\n                                    renderInterface(\n                                        interfaceElement,\n                                        userSettings,\n                                    );\n                                }\n                            }\n                        });\n                    });\n                    const restartBtn = document.getElementById(\n                        'control-button',\n                    ) as HTMLElement;\n                    restartBtn.addEventListener('click', () => {\n                        stopTimer();\n                        setPage(LOADING_PAGE);\n                        goToPage(page);\n                        delay(1000).then(() => {\n                            setPage(FIRST_PAGE);\n                            goToPage(page);\n                        });\n                    });\n                }\n            });\n        });\n    };\n\n    const flipCard = (cardElement: HTMLElement) => {\n        cardElement.classList.toggle('is-flipped');\n    };\n\n    const flipAllCards = (cardsElement: NodeListOf<Element>) => {\n        cardsElement.forEach((card) => {\n            card.classList.toggle('is-flipped');\n        });\n    };\n\n    flipAllCards(cardsList);\n};\n","import '../style/main.css';\nimport { renderFirstPageComponent } from './components/first-page-components';\nimport { renderGamePage } from './components/game-page-component';\nimport { renderLoadingPageComponent } from './components/loading-page-components';\nimport {\n    EASY_PAGE,\n    FIRST_PAGE,\n    HARD_PAGE,\n    MEDIUM_PAGE,\n    LOADING_PAGE,\n} from './routes';\n\nexport let page = FIRST_PAGE;\n\nexport let userSettings: userSet = {\n    // храним время игры\n    time: '0',\n    // храним сложность игры\n    difficulty: '',\n    //храним текущий статус игры choose-difficulty-level/on-the-game-page/playing-the-game/result-congrats/result-dead\n    gameStatus: '',\n};\n\ninterface userSet {\n    time: string;\n    difficulty: string;\n    gameStatus: string;\n}\n\nexport const setPage = (newPage: string) => {\n    page = newPage;\n};\n\nexport const setNewStatus = (newStatus: string) => {\n    userSettings.gameStatus = newStatus;\n};\n\nexport const setTime = (newTime: string) => {\n    userSettings.time = newTime;\n};\n\nexport const goToPage = (page: string) => {\n    if (\n        [EASY_PAGE, FIRST_PAGE, HARD_PAGE, MEDIUM_PAGE, LOADING_PAGE].includes(\n            page,\n        )\n    ) {\n        if (page === FIRST_PAGE) {\n            userSettings.gameStatus = 'choose-difficulty-level';\n            renderApp();\n        }\n\n        if (page === EASY_PAGE) {\n            userSettings.difficulty = 'easy';\n            userSettings.gameStatus = 'on-the-game-page';\n            userSettings.time = '00.00';\n            renderApp();\n        }\n\n        if (page === MEDIUM_PAGE) {\n            userSettings.difficulty = 'medium';\n            userSettings.gameStatus = 'on-the-game-page';\n            userSettings.time = '00.00';\n            renderApp();\n        }\n\n        if (page === HARD_PAGE) {\n            userSettings.difficulty = 'hard';\n            userSettings.gameStatus = 'on-the-game-page';\n            userSettings.time = '00.00';\n            renderApp();\n        }\n\n        if (page === LOADING_PAGE) {\n            renderApp();\n        }\n    }\n};\n\nexport const renderApp = () => {\n    const appEl = document.getElementById('app') as HTMLElement;\n    if (page === EASY_PAGE || page === MEDIUM_PAGE || page === HARD_PAGE) {\n        return renderGamePage(appEl);\n    }\n\n    if (page === FIRST_PAGE) {\n        return renderFirstPageComponent(appEl);\n    }\n\n    if (page === LOADING_PAGE) {\n        return renderLoadingPageComponent(appEl);\n    }\n};\n\ngoToPage(page);\n","import { goToPage, setPage, page } from '../app';\nimport { EASY_PAGE, HARD_PAGE, LOADING_PAGE, MEDIUM_PAGE } from '../routes';\nimport { delay } from '../modules/delay';\n\nexport function renderFirstPageComponent(appEl: HTMLElement) {\n    let firstPageHtml = `\n    <section class=\"first-page\">\n        <div class=\"first-page__wrapper\">\n            <div class=\"first-page__title\">Выбери<br>сложность</div>\n            <div class=\"first-page__difficulties\">  \n                <div class=\"first-page__btn-wrapper\"> \n                    <input type=\"radio\" id=\"easy\" name=\"difficulty\" value=\"1\">\n                    <label for=\"easy\">1</label>\n                    \n                    <input type=\"radio\" id=\"medium\" name=\"difficulty\" value=\"2\">\n                    <label for=\"medium\">2</label>\n                    \n                    <input type=\"radio\" id=\"hard\" name=\"difficulty\" value=\"3\">\n                    <label for=\"hard\">3</label>\n                </div> \n            </div>\n            <button type=\"submit\" id=\"start\" class=\"first-page__start-btn\">Старт</button>\n        </div>\n    </section>\n    `;\n\n    appEl.innerHTML = firstPageHtml;\n\n    const easyBtn = document.getElementById('easy') as HTMLElement;\n    const mediumBtn = document.getElementById('medium') as HTMLElement;\n    const hardBtn = document.getElementById('hard') as HTMLElement;\n    const startBtn = document.getElementById('start') as HTMLElement;\n    const btnCollection = [easyBtn, mediumBtn, hardBtn] as const;\n\n    btnCollection.forEach((el) => {\n        el.addEventListener('click', () => {\n            btnCollection.forEach((el) => {\n                el.removeAttribute('checked');\n            });\n            el.setAttribute('checked', '');\n        });\n    });\n\n    startBtn.addEventListener('click', () => {\n        if (easyBtn.hasAttribute('checked')) {\n            setPage(LOADING_PAGE);\n            goToPage(page);\n            delay(1000).then(() => {\n                setPage(EASY_PAGE);\n                goToPage(page);\n            });\n        }\n\n        if (mediumBtn.hasAttribute('checked')) {\n            setPage(LOADING_PAGE);\n            goToPage(page);\n            delay(1000).then(() => {\n                setPage(MEDIUM_PAGE);\n                goToPage(page);\n            });\n        }\n\n        if (hardBtn.hasAttribute('checked')) {\n            setPage(LOADING_PAGE);\n            goToPage(page);\n            delay(1000).then(() => {\n                setPage(HARD_PAGE);\n                goToPage(page);\n            });\n        }\n    });\n}\n","export const renderLoadingPageComponent = (appEl: HTMLElement) => {\n    const loaderHtml = `\n  <div class=\"loader__wrapper\">\n<svg class=\"loader\" version=\"1.1\" id=\"L7\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n  viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\">\n <path fill=\"#fff\" d=\"M31.6,3.5C5.9,13.6-6.6,42.7,3.5,68.4c10.1,25.7,39.2,38.3,64.9,28.1l-3.1-7.9c-21.3,8.4-45.4-2-53.8-23.3\n  c-8.4-21.3,2-45.4,23.3-53.8L31.6,3.5z\">\n      <animateTransform \n         attributeName=\"transform\" \n         attributeType=\"XML\" \n         type=\"rotate\"\n         dur=\"2s\" \n         from=\"0 50 50\"\n         to=\"360 50 50\" \n         repeatCount=\"indefinite\" />\n  </path>\n <path fill=\"#fff\" d=\"M42.3,39.6c5.7-4.3,13.9-3.1,18.1,2.7c4.3,5.7,3.1,13.9-2.7,18.1l4.1,5.5c8.8-6.5,10.6-19,4.1-27.7\n  c-6.5-8.8-19-10.6-27.7-4.1L42.3,39.6z\">\n      <animateTransform \n         attributeName=\"transform\" \n         attributeType=\"XML\" \n         type=\"rotate\"\n         dur=\"1s\" \n         from=\"0 50 50\"\n         to=\"-360 50 50\" \n         repeatCount=\"indefinite\" />\n  </path>\n <path fill=\"#fff\" d=\"M82,35.7C74.1,18,53.4,10.1,35.7,18S10.1,46.6,18,64.3l7.6-3.4c-6-13.5,0-29.3,13.5-35.3s29.3,0,35.3,13.5\n  L82,35.7z\">\n      <animateTransform \n         attributeName=\"transform\" \n         attributeType=\"XML\" \n         type=\"rotate\"\n         dur=\"2s\" \n         from=\"0 50 50\"\n         to=\"360 50 50\" \n         repeatCount=\"indefinite\" />\n  </path>\n</svg>\n</div>\n`;\n    appEl.innerHTML = loaderHtml;\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","FIRST_PAGE","EASY_PAGE","MEDIUM_PAGE","HARD_PAGE","LOADING_PAGE","delay","ms","Promise","resolve","setTimeout","minutes","seconds","interval","stopTimer","clearInterval","renderInterface","htmlElement","userSettings","innerHTML","gameStatus","timerElement","querySelector","resultTime","setInterval","startTimer","time","addEventListener","setPage","goToPage","page","then","suit","cardValue","cards","randomCards","i","length","Math","floor","random","value","forEach","el","push","sort","renderCards","map","card","join","difficulty","newPage","setNewStatus","newStatus","setTime","newTime","includes","renderApp","appEl","document","getElementById","gamePageHtml","interfaceElement","playGame","cardsList","querySelectorAll","cardForCompare","deathSound","rightSound","startSound","flipAllCards","play","volume","HTMLElement","dataset","flipCard","cardElement","classList","toggle","cardsElement","renderGamePage","easyBtn","mediumBtn","hardBtn","startBtn","btnCollection","removeAttribute","setAttribute","hasAttribute","renderFirstPageComponent","renderLoadingPageComponent"],"sourceRoot":""}